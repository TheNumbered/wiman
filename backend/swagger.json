{
  "openapi": "3.0.0",
  "info": {
    "title": "Classroom/Venue Management System API",
    "description": "API documentation for the Classroom/Venue Management System.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://wiman.azurewebsites.net/api/",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api/",
      "description": "Local server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Venues",
      "description": "Operations related to venues"
    },
    {
      "name": "Bookings",
      "description": "Operations related to booking venues"
    },
    {
      "name": "Maintenance",
      "description": "Operations related to maintenance issues"
    },
    {
      "name": "Notifications",
      "description": "Operations related to notifications for users"
    },
    {
      "name": "Admin",
      "description": "Administrative operations"
    },
    {
      "name": "User",
      "description": "User-related operations"
    }
  ],
  "paths": {
    "/venues": {
      "get": {
        "tags": ["Venues"],
        "summary": "Get a list of venues",
        "description": "Retrieve a list of venues that meet specific user requirements.",
        "operationId": "venuesGET",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date for which the venue is needed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "Time for which the venue is needed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "time"
            }
          },
          {
            "name": "building",
            "in": "query",
            "description": "Location of the venue.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "features",
            "in": "query",
            "description": "Specific features required (e.g., projector, seating capacity).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of venues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Venue"
                  },
                  "example": [
                    {
                      "venueId": 0,
                      "capacity": 0,
                      "code": "CLM07",
                      "campus": "West Campus",
                      "type": "Lecture Theatre",
                      "name": "Commerce, Law & Management",
                      "amenities": ["projector", "whiteboard"],
                      "location": {
                        "lat": 20,
                        "lng": 20
                      },
                      "pictures": [
                        "https://example.com/images/clm37_1.jpg",
                        "https://example.com/images/clm37_2.jpg"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No venues found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No venues found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Venues"
      }
    },
    "/venues/{venueId}/availability": {
      "get": {
        "tags": ["Venues"],
        "summary": "Get availability calendar for a venue",
        "description": "Retrieve the availability calendar for a specific venue across different dates.",
        "operationId": "venuesVenueIdAvailabilityGET",
        "parameters": [
          {
            "name": "venueId",
            "in": "path",
            "description": "ID of the venue",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability calendar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No venues found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No venues found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Venues"
      }
    },
    "/user/bookings/active": {
      "get": {
        "summary": "Get active bookings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "List of active bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/bookings/past": {
      "get": {
        "summary": "Get past bookings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "List of past bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No past bookings found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No past bookings found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "summary": "Create a new booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBooking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Required fields are missing"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings/status/{bookingId}": {
      "get": {
        "summary": "Get the status of a booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "description": "ID of the booking to get the status for",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "confirmed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid booking ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid booking ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings/cancel/{bookingId}": {
      "put": {
        "summary": "Cancel a booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "description": "ID of the booking to cancel",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Booking cancelled"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid booking ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid booking ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maintenance": {
      "post": {
        "tags": ["Maintenance"],
        "summary": "Report a maintenance issue",
        "description": "Report a maintenance issue for a specific venue.",
        "operationId": "maintenancePOST",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "venueId": {
                    "type": "string"
                  },
                  "reportedBy": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "photos": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                },
                "required": ["venueId", "reportedBy", "description"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Maintenance issue reported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Maintenance"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request body"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Maintenance"
      }
    },
    "/maintenance/{issueId}": {
      "patch": {
        "tags": ["Maintenance"],
        "summary": "Update maintenance issue status",
        "description": "Update the status of a maintenance issue (e.g., In Progress, Completed).",
        "operationId": "maintenanceIssueIdPATCH",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "ID of the maintenance issue",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Maintenance issue status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Maintenance issue status updated"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No maintenance issue foud",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": " Maintenance issue with the given ID was not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Maintenance"
      }
    },
    "/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notifications for a user",
        "description": "Retrieve all notifications related to bookings, maintenance issues, and more for a specific user.",
        "operationId": "notificationsGET",
        "responses": {
          "200": {
            "description": "A list of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  },
                  "example": [
                    {
                      "notificationId": 1,
                      "message": "Your booking has been confirmed",
                      "date": "2024-08-29T04:56:07.000Z",
                      "code": "booking_confirmed",
                      "isRead": false
                    },
                    {
                      "notificationId": 2,
                      "message": "Maintenance work is scheduled for tomorrow",
                      "date": "2024-08-28T11:22:45.000Z",
                      "code": "maintenance_scheduled",
                      "isRead": true
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No notifications found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No notifications found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": ["Notifications"],
        "summary": "Create a notification",
        "description": "Create a new notification for a specific user.",
        "operationId": "createNotificationPOST",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer",
                    "description": "ID of the user receiving the notification"
                  },
                  "code": {
                    "type": "string",
                    "description": "Code identifying the type of notification"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message content of the notification"
                  }
                },
                "required": ["userId", "code", "message"],
                "example": {
                  "userId": 123,
                  "code": "booking_cancelled",
                  "message": "Your booking has been cancelled"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notification created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Notification created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid input"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{notificationId}/read": {
      "put": {
        "tags": ["Notifications"],
        "summary": "Mark a notification as read",
        "description": "Mark a specific notification as read by its ID.",
        "operationId": "markNotificationAsReadPUT",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the notification to mark as read"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Notification marked as read"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Notification not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/admin/schedule": {
      "post": {
        "tags": ["Admin"],
        "summary": "Update academic schedule",
        "description": "Update the academic schedule in the system to ensure classroom availability.",
        "operationId": "adminSchedulePOST",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Schedule updated"
          },
          "400": {
            "description": "Invalid file format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The uploaded file format is not supported"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/reports": {
      "get": {
        "tags": ["Admin"],
        "summary": "Generate usage reports",
        "description": "Generate reports on room usage, booking trends, and maintenance issues.",
        "operationId": "adminReportsGET",
        "parameters": [
          {
            "name": "reportType",
            "in": "query",
            "description": "Type of report (e.g., usage, booking, maintenance)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "400": {
            "description": "Invalid report type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The report type provided is invalid"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/blackout-periods": {
      "post": {
        "tags": ["Admin"],
        "summary": "Set blackout periods for venues",
        "description": "Set blackout periods for specific venues during maintenance or renovations.",
        "operationId": "adminBlackout_periodsPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlackoutPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Blackout period set"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The request contains invalid parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/users/{userId}/ban": {
      "post": {
        "tags": ["Admin"],
        "summary": "Ban a user",
        "description": "Ban a user from the system based on behavior or violation of terms.",
        "operationId": "adminUsersUserIdBanPOST",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User banned"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User with the given ID was not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    }
  },
  "components": {
    "schemas": {
      "Venue": {
        "type": "object",
        "properties": {
          "venueId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "campus": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "format": "float"
              },
              "lng": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "capacity": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "pictures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Availability": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "bookedTimeSlots": {
            "type": "array",
            "description": "List of available time slots for the venue on the given date.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "date": "2020-01-23",
          "bookedTimeSlots": ["13:00-13:50", "14:15-15:00"]
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique identifier for the booking"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the booking (YYYY-MM-DD)"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the booking (HH:MM:SS)"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the booking (HH:MM:SS)"
          },
          "venueId": {
            "type": "integer",
            "description": "Venue ID for the booking"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "cancelled", "confirmed"],
            "description": "Status of the booking"
          },
          "reasonForCancellation": {
            "type": "string",
            "description": "Reason for cancellation (if applicable)"
          },
          "repeatFrequency": {
            "type": "string",
            "enum": ["none", "daily", "weekly", "monthly"],
            "description": "Frequency of repeating bookings"
          },
          "repeatUntil": {
            "type": "string",
            "format": "date",
            "description": "Date until which the booking repeats (optional, can be null)"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event"
          }
        },
        "required": ["id", "date", "startTime", "endTime", "venueId", "status", "eventName"]
      },
      "NewBooking": {
        "type": "object",
        "required": ["date", "startTime", "endTime", "venueId", "eventName"],
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the booking (YYYY-MM-DD)"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the booking (HH:MM:SS)"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the booking (HH:MM:SS)"
          },
          "venueId": {
            "type": "integer",
            "description": "ID of the venue for the booking"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event"
          },
          "repeatFrequency": {
            "type": "string",
            "enum": ["none", "daily", "weekly", "monthly"],
            "description": "Frequency of repeating bookings (optional, defaults to 'none')"
          },
          "repeatUntil": {
            "type": "string",
            "format": "date",
            "description": "Date until which the booking repeats (optional, can be null)"
          }
        }
      },
      "Maintenance": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "venueId": {
            "type": "string"
          },
          "reportedBy": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": ["reported", "in_progress", "completed"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MaintenanceUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["reported", "in_progress", "completed"]
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "description": "Unique identifier for the notification"
          },
          "code": {
            "type": "string",
            "description": "Code representing the type or category of the notification"
          },
          "message": {
            "type": "string",
            "description": "Message content of the notification"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the notification was created (ISO 8601 format)"
          },
          "isRead": {
            "type": "boolean",
            "description": "Indicates whether the notification has been read"
          }
        },
        "required": ["notificationId", "code", "message", "date", "isRead"]
      },
      "ScheduleUpdate": {
        "type": "object",
        "properties": {
          "scheduleFile": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string"
          },
          "reportType": {
            "type": "string"
          },
          "generatedOn": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BlackoutPeriod": {
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "format": "time"
          },
          "endTime": {
            "type": "string",
            "format": "time"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "BanUser": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "duration": {
            "type": "string",
            "description": "Duration of the ban (e.g., 30 days)"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
