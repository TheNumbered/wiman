{
  "openapi": "3.0.0",
  "info": {
    "title": "Classroom/Venue Management System API",
    "description": "API documentation for the Classroom/Venue Management System.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://wiman.azurewebsites.net/api/",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api/",
      "description": "Local server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Venues",
      "description": "Operations related to venues"
    },
    {
      "name": "Bookings",
      "description": "Operations related to booking venues"
    },
    {
      "name": "Maintenance",
      "description": "Operations related to maintenance issues"
    },
    {
      "name": "Notifications",
      "description": "Operations related to notifications for users"
    },
    {
      "name": "Admin",
      "description": "Administrative operations"
    },
    {
      "name": "User",
      "description": "User-related operations"
    }
  ],
  "paths": {
    "/venues": {
      "get": {
        "tags": ["Venues"],
        "summary": "Get a list of venues",
        "description": "Retrieve a list of venues that meet specific user requirements.",
        "operationId": "venuesGET",
        "parameters": [
          {
            "name": "buildingName",
            "in": "query",
            "description": "Location of the venue.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "features",
            "in": "query",
            "description": "Specific features required (e.g., 'projector', 'whiteboard').",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seatingCapacity",
            "in": "query",
            "description": "Minimum amout seat required",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of venues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Venue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No venues found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No venues found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Venues"
      }
    },
    "/venues/{venueId}/issue-report": {
      "post": {
        "tags": ["Venues"],
        "summary": "Create a new issue report",
        "description": "Create a new issue report with an optional image upload.",
        "operationId": "createIssueReport",
        "parameters": [
          {
            "name": "venueId",
            "in": "path",
            "description": "ID of the venue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "images": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Issue report created successfully"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/venues/{venueId}/reservations": {
      "get": {
        "tags": ["Venues"],
        "summary": "Get reservation details for a venue",
        "description": "Retrieve the reservation details for a specific venue across different dates, including event name and time slots.",
        "operationId": "venueReservationsGET",
        "parameters": [
          {
            "name": "venueId",
            "in": "path",
            "description": "ID of the venue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation details for the venue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reservation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No reservations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No reservations found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Venues"
      }
    },
    "/user/bookings": {
      "get": {
        "summary": "Get active bookings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "List of active bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No past bookings found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No bookings found for this user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/role": {
      "get": {
        "summary": "Get user role",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "User role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              }
            }
          },
          "404": {
            "description": "User role not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User role not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/history": {
      "delete": {
        "summary": "Get user role",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "User role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "History cleared"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No history found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No history found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "summary": "Create a new booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBooking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Booking created successfully"
                    },
                    "bookingId": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Required fields are missing"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings/status/{bookingId}": {
      "get": {
        "summary": "Get the status of a booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "description": "ID of the booking to get the status for",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "confirmed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid booking ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid booking ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings/cancel/{bookingId}": {
      "put": {
        "summary": "Cancel a booking",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": ["Bookings"],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "description": "ID of the booking to cancel",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Booking cancelled"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid booking ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid booking ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notifications for a user",
        "description": "Retrieve all notifications related to bookings, maintenance issues, and more for a specific user.",
        "operationId": "notificationsGET",
        "responses": {
          "200": {
            "description": "A list of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  },
                  "example": [
                    {
                      "notificationId": 1,
                      "message": "Your booking has been confirmed",
                      "date": "2024-08-29T04:56:07.000Z",
                      "route": "/bookings",
                      "isRead": false
                    },
                    {
                      "notificationId": 2,
                      "message": "Maintenance work is scheduled for tomorrow",
                      "date": "2024-08-28T11:22:45.000Z",
                      "route": "/maintenance",
                      "isRead": true
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/notifications/{notificationId}/read": {
      "put": {
        "tags": ["Notifications"],
        "summary": "Mark a notification as read",
        "description": "Mark a specific notification as read by its ID.",
        "operationId": "markNotificationAsReadPUT",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the notification to mark as read"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Notification marked as read"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Notification not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/admin/bookings": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get all bookings",
        "description": "Retrieve all bookings in the system.",
        "operationId": "getAllBookings",
        "responses": {
          "200": {
            "description": "List of all bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/users": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get all users",
        "description": "Retrieve all users in the system.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/bookings/approve/{id}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Approve a booking",
        "description": "Approve a pending booking by its ID.",
        "operationId": "confirmBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Booking approved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Booking Approved"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/bookings/cancel/{id}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Cancel a booking",
        "description": "Cancel a booking by its ID.",
        "operationId": "cancelBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Booking canceled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Booking canceled"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/toggle-ban/{id}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Toggle user's ban status",
        "description": "Ban or unban a user based on the current status.",
        "operationId": "toggleBanStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User ban status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User banned"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/update-role/{id}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Update a user's role",
        "description": "Update a user's role (e.g., admin, user, maintenance).",
        "operationId": "updateUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User role updated"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "x-swagger-router-controller": "Admin"
      }
    },
    "/admin/update-venue/{id}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Update venue information",
        "description": "Update the capacity, amenities, and maintenance status of a venue.",
        "operationId": "updateVenue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the venue to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "capacity": {
                    "type": "integer",
                    "description": "The maximum capacity of the venue"
                  },
                  "amenities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of amenities available in the venue"
                  },
                  "underMaintenance": {
                    "type": "boolean",
                    "description": "Whether the venue is under maintenance"
                  }
                },
                "required": ["capacity"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Venue updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Room updated successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Venue not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/maintenance/issue-reports": {
      "get": {
        "tags": ["Maintenance"],
        "summary": "Get all issue reports",
        "description": "Retrieve a list of all issue reports in the system.",
        "operationId": "getAllIssueReports",
        "responses": {
          "200": {
            "description": "A list of issue reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueReport"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/maintenance/issue-reports/{id}": {
      "get": {
        "tags": ["Maintenance"],
        "summary": "Get an issue report by ID",
        "description": "Retrieve a specific issue report by its ID.",
        "operationId": "getIssueReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the issue report to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested issue report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReport"
                }
              }
            }
          },
          "404": {
            "description": "Issue report not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/maintenance/issue-report/{id}/review": {
      "put": {
        "tags": ["Maintenance"],
        "summary": "Add a review to an issue report",
        "description": "Add a review and update the issue state for a specific issue report.",
        "operationId": "addReviewToIssueReportReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the issue report to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review added successfully"
          },
          "404": {
            "description": "Issue report not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/maintenance/issue-report/{id}/add-setback": {
      "put": {
        "tags": ["Maintenance"],
        "summary": "Add a setback to an issue report",
        "description": "Report a setback and update the resolution log of an issue report.",
        "operationId": "addIssueSetBackReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the issue report to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetbackReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Setback reported successfully"
          },
          "404": {
            "description": "Issue report not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/maintenance/issue-report/{id}/close": {
      "put": {
        "tags": ["Maintenance"],
        "summary": "Close an issue report",
        "description": "Mark an issue report as closed after resolution.",
        "operationId": "closeIssueReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the issue report to close"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue report closed successfully"
          },
          "404": {
            "description": "Issue report not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Venue": {
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string"
          },
          "buildingName": {
            "type": "string"
          },
          "campusName": {
            "type": "string"
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": ["LECTURE", "TUTORIAL", "LAB", "MEETING"]
          },
          "capacity": {
            "type": "integer"
          },
          "imageUrl": {
            "type": "string"
          },
          "isUnderMaintenance": {
            "type": "boolean"
          },
          "location": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number"
              },
              "lng": {
                "type": "number"
              }
            }
          }
        },
        "example": {
          "venueId": "LAB1D",
          "capacity": 20,
          "campusName": "East Campus",
          "buildingName": "Engineering Building",
          "imageUrl": "/venue-images/conferenceRoom.jpg",
          "type": "LAB",
          "isUnderMaintenance": false,
          "amenities": ["computer", "projector"],
          "location": {
            "lat": 37.7749,
            "lng": -122.4194
          }
        }
      },
      "Reservation": {
        "type": "object",
        "description": "A map of dates to reservation details for a specific venue.",
        "additionalProperties": {
          "type": "array",
          "description": "List of reservations for the given date.",
          "items": {
            "type": "object",
            "properties": {
              "event_name": {
                "type": "string",
                "description": "Name of the event"
              },
              "time": {
                "type": "string",
                "description": "The time slot for the event, in format 'HH:mm:ss-HH:mm:ss'",
                "example": "09:00:00-11:00:00"
              }
            }
          }
        },
        "example": {
          "2024-10-20": [
            {
              "event_name": "Conference Meeting",
              "time": "09:00:00-11:00:00"
            },
            {
              "event_name": "Team Meeting",
              "time": "10:00:00-12:00:00"
            }
          ],
          "2024-10-21": [
            {
              "event_name": "Workshop",
              "time": "13:00:00-15:00:00"
            }
          ]
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique identifier for the booking"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the booking (YYYY-MM-DD)"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the booking (HH:MM:SS)"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the booking (HH:MM:SS)"
          },
          "venueId": {
            "type": "integer",
            "description": "Venue ID for the booking"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "cancelled", "confirmed"],
            "description": "Status of the booking"
          },
          "reasonForCancellation": {
            "type": "string",
            "description": "Reason for cancellation (if applicable)"
          },
          "repeatFrequency": {
            "type": "string",
            "enum": ["none", "daily", "weekly", "monthly"],
            "description": "Frequency of repeating bookings"
          },
          "repeatUntil": {
            "type": "string",
            "format": "date",
            "description": "Date until which the booking repeats (optional, can be null)"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event"
          }
        },
        "required": ["id", "date", "startTime", "endTime", "venueId", "status", "eventName"]
      },
      "NewBooking": {
        "type": "object",
        "required": ["date", "startTime", "endTime", "venueId", "eventName"],
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the booking (YYYY-MM-DD)"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the booking (HH:MM:SS)"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the booking (HH:MM:SS)"
          },
          "venueId": {
            "type": "string",
            "description": "ID of the venue for the booking"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event"
          },
          "repeatFrequency": {
            "type": "string",
            "enum": ["none", "daily", "weekly", "monthly"],
            "description": "Frequency of repeating bookings (optional, defaults to 'none')"
          },
          "repeatUntil": {
            "type": "string",
            "format": "date",
            "description": "Date until which the booking repeats (optional, can be null)"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "description": "Unique identifier for the notification"
          },
          "route": {
            "type": "string",
            "description": "Route to redirect the user to when the notification is clicked"
          },
          "message": {
            "type": "string",
            "description": "Message content of the notification"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the notification was created (ISO 8601 format)"
          },
          "isRead": {
            "type": "boolean",
            "description": "Indicates whether the notification has been read"
          }
        },
        "required": ["notificationId", "code", "message", "date", "isRead"]
      },
      "User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "profileUrl": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "maintenance"]
          },
          "blocked": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user", "admin", "maintenance"]
          },
          "blocked": {
            "type": "boolean"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Resource not found or invalid operation"
          }
        }
      },
      "IssueReport": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "integer",
            "description": "The unique identifier of the issue report"
          },
          "venueId": {
            "type": "string",
            "description": "The venue associated with the issue"
          },
          "reportedBy": {
            "type": "string",
            "description": "The user who reported the issue"
          },
          "issueDescription": {
            "type": "string",
            "description": "A detailed description of the issue"
          },
          "reportedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the issue was reported"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the issue was resolved",
            "nullable": true
          },
          "resolutionLog": {
            "type": "string",
            "description": "The log of resolutions or actions taken to resolve the issue",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "The URL of an image associated with the issue report",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["Reported", "In Progress", "Resolved"],
            "description": "The current status of the issue report"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "review": {
            "type": "string",
            "description": "Review comments or further details for the issue"
          },
          "issueState": {
            "type": "string",
            "description": "The current state or classification of the issue"
          }
        }
      },
      "SetbackReport": {
        "type": "object",
        "properties": {
          "setback": {
            "type": "string",
            "description": "Details of the setback in resolving the issue"
          },
          "newFixRequirements": {
            "type": "string",
            "description": "New requirements or changes needed to fix the issue"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
